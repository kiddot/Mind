package com.android.common.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.common.bean.Team;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEAM".
*/
public class TeamDao extends AbstractDao<Team, Void> {

    public static final String TABLENAME = "TEAM";

    /**
     * Properties of entity Team.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImageId = new Property(0, int.class, "imageId", false, "IMAGE_ID");
        public final static Property TeamName = new Property(1, String.class, "teamName", false, "TEAM_NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property TeamGroup = new Property(3, String.class, "teamGroup", false, "TEAM_GROUP");
    }


    public TeamDao(DaoConfig config) {
        super(config);
    }
    
    public TeamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEAM\" (" + //
                "\"IMAGE_ID\" INTEGER NOT NULL ," + // 0: imageId
                "\"TEAM_NAME\" TEXT," + // 1: teamName
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"TEAM_GROUP\" TEXT);"); // 3: teamGroup
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Team entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getImageId());
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(2, teamName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String teamGroup = entity.getTeamGroup();
        if (teamGroup != null) {
            stmt.bindString(4, teamGroup);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Team entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getImageId());
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(2, teamName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String teamGroup = entity.getTeamGroup();
        if (teamGroup != null) {
            stmt.bindString(4, teamGroup);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Team readEntity(Cursor cursor, int offset) {
        Team entity = new Team( //
            cursor.getInt(offset + 0), // imageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // teamName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // teamGroup
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Team entity, int offset) {
        entity.setImageId(cursor.getInt(offset + 0));
        entity.setTeamName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTeamGroup(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Team entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Team entity) {
        return null;
    }

    @Override
    public boolean hasKey(Team entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
